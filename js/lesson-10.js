// –ó–∞–Ω–Ω—è—Ç—Ç—è 10. –ö–ª–∞—Å–∏
console.log('–ó–∞–Ω–Ω—è—Ç—Ç—è 10. –ö–ª–∞—Å–∏');

// Example 1 - –ë–ª–æ–≥–µ—Ä
console.log('Example 1 - –ë–ª–æ–≥–µ—Ä');

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–± º—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
// email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// age - –≤—ñ–∫, —á–∏—Å–ª–æ
// numberofPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–± º—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞) is ${–≤—ñ–∫) years old and has $(–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤) posts
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ

class Bloger {
  constructor({ name, age, numberofPosts, topics } = {}) {
    this.email = name;
    this.age = age;
    this.numberofPosts = numberofPosts;
    this.topics = topics;
  }

  getInfo() {
    return `User ${this.email} is ${this.age} years old and has ${this.numberofPosts} posts.`;
  }

  updatePostCount(value) {
    this.numberofPosts += value;
  }
}

const mango = new Bloger({
  name: 'mango@mail.com',
  age: 24,
  numberofPosts: 20,
  topics: ['tech', 'cooking'],
});

console.log(mango.getInfo());
mango.updatePostCount(8);
console.log(mango.getInfo());

const poly = new Bloger({
  name: 'poly@mail.com',
  age: 19,
  numberofPosts: 17,
  topics: ['sports', 'gaming', 'health'],
});

console.log(poly.getInfo());
poly.updatePostCount(3);
console.log(poly.getInfo());
console.log('\n');

// Example 2 - –°—Ö–æ–≤–∏—â–µ
console.log('Example 2 - –°—Ö–æ–≤–∏—â–µ');

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage- —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–± º—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
// getItems () - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤
// addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö
// removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö

class Storage {
  constructor(items) {
    this.items = items;
  }

  getItems() {
    return this.items;
  }

  addItem(item) {
    if (!this.items.includes(item)) {
      this.items.push(item);
      console.log(`–¢–æ–≤–∞—Ä ${item} –¥–æ–¥–∞–Ω–æ!`);
      return;
    }

    console.log(`–¢–æ–≤–∞—Ä ${item} –≤–∂–µ —î –Ω–∞ —Å–∫–ª–∞–¥—ñ!`);
  }

  removeItem(item) {
    const idx = this.items.indexOf(item);

    if (!!~idx) {
      this.items.splice(idx, 1);
      console.log(`–¢–æ–≤–∞—Ä ${item} –≤–∏–¥–∞–ª–µ–Ω–æ!`);
      return;
    }

    console.log(`–¢–æ–≤–∞—Ä ${item} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
  }
}

const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);
const items = storage.getItems();

console.log(items);

storage.addItem('üçã');
storage.addItem('üçì');
storage.addItem('üçå');

console.log(items);

storage.removeItem('üçá');
storage.removeItem('üçê');

console.log(items);
console.log('\n');

// Example 3 - User
console.log('Example 3 - User');

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–± º—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä login —Ç–∞ email

class User {
  #login;
  #email;

  constructor({ login, email } = {}) {
    this.#login = login;
    this.#email = email;
  }

  get login() {
    return this.#login;
  }

  set login(newLogin) {
    if (this.#login !== newLogin) {
      this.#login = newLogin;
    }
  }

  get email() {
    return this.#email;
  }

  set email(newEmail) {
    if (this.#email !== newEmail) {
      this.#email = newEmail;
    }
  }
}

const ajax = new User({ login: 'Ajax', email: 'ajax@mail.com' });

console.log(ajax.login);
console.log(ajax.email);

ajax.login = 'Ajax';
ajax.login = 'superAjax';
ajax.email = 'ajax@gmail.com';

console.log(ajax.login);
console.log(ajax.email);
console.log('\n');

// Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
console.log('Example 4 - –ù–æ—Ç–∞—Ç–∫–∏');

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ notes. –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–± º—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ prionity. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–± º—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ça updatePriority (text, newPriority)

class Notes {
  static Priority = {
    LOW: 'low',
    NORMAL: 'normal',
    HIGH: 'high',
  };

  constructor(notes) {
    this.items = notes;
  }

  addNote(note) {
    const inArr = this.items.some(({ text }) => text === note.text);
    if (!inArr) {
      this.items.push(note);
      return;
    }

    console.log(`–ù–æ—Ç–∞—Ç–∫–∞ "${note.text}" - –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É!`);
  }

  removeNote(text) {
    const idx = this.items.findIndex(({ text: noteText }) => noteText === text);

    if (!!~idx) {
      this.items.splice(idx, 1);
    }
  }

  updatePriority(text, newPriority) {
    const idx = this.items.findIndex(({ text: noteText }) => noteText === text);

    if (!!~idx) {
      this.items[idx].priority = newPriority;
    }
  }
}

const myNotes = new Notes([]);

myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
myNotes.addNote({ text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.HIGH });
myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
myNotes.addNote({ text: '–ú–æ—è —Ç—Ä–µ—Ç—è –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.NORMAL });

console.table(myNotes.items);

myNotes.removeNote('–ú–æ—è —Ç—Ä–µ—Ç—è –∑–∞–º—ñ—Ç–∫–∞');

console.table(myNotes.items);

myNotes.updatePriority('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.NORMAL);
console.table(myNotes.items);
