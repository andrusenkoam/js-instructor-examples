// –ó–∞–Ω–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
console.log('–ó–∞–Ω–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó');

// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
console.log('Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó');

// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–± º—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–± º—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–± º—î–∫—Ç
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–± º—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–± º—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

function createProduct(obj, callback) {
  const product = {
    id: Math.random().toString(36).substr(2, 9),
    ...obj,
  };

  callback(product);
}

function logProduct(obj) {
  console.log(obj);
}

function logTotalPrice({ price, quantity }) {
  console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—É ${price * quantity} –≥—Ä–æ—à–µ–π!`);
}

createProduct({ name: 'apple', price: 30, quantity: 3 }, logProduct);
createProduct({ name: 'apple', price: 30, quantity: 3 }, logTotalPrice);
createProduct({ name: 'lemon', price: 20, quantity: 5 }, logProduct);
createProduct({ name: 'lemon', price: 20, quantity: 5 }, logTotalPrice);

console.log('\n');

// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
console.log('Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó');

// –î–æ–¥–∞–π—Ç–µ –≤ –æ–± º—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) Ta deposit (amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏
// –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT ao this.balance, i onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
// –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, i onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É

const TRANSACTION_LIMIT = 1000;

const account = {
  userName: 'Jacob',
  balance: 400,

  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`–õ—ñ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó - ${TRANSACTION_LIMIT} –≥—Ä–æ—à–µ–π`);
      return;
    } else if (amount > this.balance) {
      onError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É!');
      return;
    }

    this.balance -= amount;
    onSuccess('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
    console.log(`–ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É - ${this.balance} –≥—Ä–æ—à–µ–π`);
  },

  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`–õ—ñ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó - ${TRANSACTION_LIMIT} –≥—Ä–æ—à–µ–π`);
      return;
    } else if (amount <= 0) {
      onError('–°—É–º–∞ –≤—ñ–¥—î–º–Ω–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 0!');
      return;
    }

    this.balance += amount;
    onSuccess('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
    console.log(`–ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É - ${this.balance} –≥—Ä–æ—à–µ–π`);
  },
};

function handleSuccess(message) {
  console.log(`‚úÖ Success! ${message}`);
}

function handleError(message) {
  console.log(`‚ùå Error! ${message}`);
}

account.withdraw(2000, handleSuccess, handleError);
account.withdraw(600, handleSuccess, handleError);
account.withdraw(300, handleSuccess, handleError);
account.deposit(1700, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.deposit(-600, handleSuccess, handleError);
account.deposit(600, handleSuccess, handleError);

console.log('\n');

// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
console.log('Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó');

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞

function each(array, callback) {
  const newArray = [];

  for (const number of array) {
    newArray.push(callback(number));
  }

  return newArray;
}

console.log(
  each([64, 49, 36, 2, 16], function (value) {
    return value * 2;
  })
);
console.log(
  each([64, 49, 36, 2, 16], function (value) {
    return value - 10;
  })
);
console.log(
  each([64, 49, 36, 2, 16], function (value) {
    return Math.sqrt(value);
  })
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.ceil(value);
  })
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.floor(value);
  })
);
console.log('\n');

// Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
console.log('Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó');

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É Example 1 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π

const createNewProduct = (obj, callback) =>
  callback({
    id: Math.random().toString(36).substr(2, 9),
    ...obj,
  });

const logNewProduct = obj => console.log(obj);

const logNewTotalPrice = ({ price, quantity }) =>
  console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—É ${price * quantity} –≥—Ä–æ—à–µ–π!`);

createNewProduct({ name: 'üçé', price: 30, quantity: 3 }, logNewProduct);
createNewProduct({ name: 'üçé', price: 30, quantity: 3 }, logNewTotalPrice);
createNewProduct({ name: 'üçã', price: 20, quantity: 5 }, logNewProduct);
createNewProduct({ name: 'üçã', price: 20, quantity: 5 }, logNewTotalPrice);

console.log('\n');

// Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
console.log('Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó');

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–ª–±–µ–∫—ñ–≤ Example 2 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π

const NEW_TRANSACTION_LIMIT = 1000;

const newAccount = {
  userName: 'Jacob',
  balance: 400,

  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`–õ—ñ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó - ${TRANSACTION_LIMIT} –≥—Ä–æ—à–µ–π`);
      return;
    } else if (amount > this.balance) {
      onError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É!');
      return;
    }

    this.balance -= amount;
    onSuccess('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
    console.log(`–ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É - ${this.balance} –≥—Ä–æ—à–µ–π`);
  },

  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`–õ—ñ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó - ${TRANSACTION_LIMIT} –≥—Ä–æ—à–µ–π`);
      return;
    } else if (amount <= 0) {
      onError('–°—É–º–∞ –≤—ñ–¥—î–º–Ω–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 0!');
      return;
    }

    this.balance += amount;
    onSuccess('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
    console.log(`–ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É - ${this.balance} –≥—Ä–æ—à–µ–π`);
  },
};

const newHandleSuccess = message => console.log(`‚úÖ Success! ${message}`);

const newHandleError = message => console.log(`‚ùå Error! ${message}`);

newAccount.withdraw(2000, handleSuccess, handleError);
newAccount.withdraw(600, handleSuccess, handleError);
newAccount.withdraw(300, handleSuccess, handleError);
newAccount.deposit(1700, handleSuccess, handleError);
newAccount.deposit(0, handleSuccess, handleError);
newAccount.deposit(-600, handleSuccess, handleError);
newAccount.deposit(600, handleSuccess, handleError);

console.log('\n');

// Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
console.log('Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó');

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É Example 3 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π

function newEach(array, callback) {
  const newArray = [];

  for (const number of array) {
    newArray.push(callback(number));
  }

  return newArray;
}

console.log(newEach([64, 49, 36, 2, 16], value => value * 2));
console.log(newEach([64, 49, 36, 2, 16], value => value - 10));
console.log(newEach([64, 49, 36, 2, 16], value => Math.sqrt(value)));
console.log(newEach([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));
console.log(newEach([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.floor(value)));
console.log('\n');

// Example 7 - –ú–µ—Ç–æ–¥ forEach
console.log('Example 7 - –ú–µ—Ç–æ–¥ forEach');

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó

// function logItems(items) {
//   console.log(items);

//   items.forEach((item, index) => console.log(`${index + 1} - ${item}`));
// }

const logItems = arr => {
  console.log(arr);
  arr.forEach((item, idx) => console.log(`${idx + 1} - ${item}`));
};

logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

console.log('\n');

// Example 8 - –ú–µ—Ç–æ–¥ forEach
console.log('Example 8 - –ú–µ—Ç–æ–¥ forEach');

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó

// function calculateAverage(...args) {
//   let total = 0;
//   for (let i = 0; i < args.length; i += 1) {
//     total += args[i];
//   }

//   return total / args.length;
// }

const calculateAverage = (...args) => {
  let total = 0;
  args.forEach(arg => (total += arg));

  return total / args.length;
};

console.log(calculateAverage(1, 2, 3, 4));
console.log(calculateAverage(14, 8, 2));
console.log(calculateAverage(27, 43, 2, 8, 36));
console.log('\n');
console.log('\n');
